trigger:
  branches:
    include:
      - '*'
    exclude:
      - refs/pull/*/head
  paths:
    exclude:
      - docs/*
      - .github/*

# Global variables
variables:
  buildConfiguration: Debug
  dotnetCoreSdk5Version: 5.0.103
  ddApiKey: $(DD_API_KEY)
  DD_DOTNET_TRACER_MSBUILD:

# Declare the datadog agent as a resource to be used as a pipeline service
resources:
  containers:
  - container: dd_agent
    image: datadog/agent
    ports:
    - 8126:8126
    env:
      DD_API_KEY: $(ddApiKey)
      DD_INSIDE_CI: true

# Stages
stages:
- stage: build
  dependsOn: []
  jobs:
  - job: build_managed
    pool:
      vmImage: windows-2019
    steps:

    - template: steps/install-dotnet.yml

    - task: DotNetCoreCLI@2
      displayName: dotnet build
      inputs:
        command: build
        configuration: $(buildConfiguration)
        arguments: /nowarn:netsdk1138 #-l:DatadogLogger,"$(DD_DOTNET_TRACER_MSBUILD)"
        projects: |
          src/**/*.csproj
          test/**/*.Tests.csproj
          test/benchmarks/**/*.csproj
          !src/Datadog.Trace.Tools.Runner/*.csproj
      env:
        DD_SERVICE: dd-trace-dotnet

    - publish: $(System.DefaultWorkingDirectory)
      artifact: source-build-managed
      condition: succeededOrFailed()

- stage: managed_unit_tests
  dependsOn: build
  jobs:
  - job: unit_tests_managed
    strategy:
      matrix:
        windows:
          imageName: windows-2019
        linux:
          imageName: ubuntu-18.04
        macos:
          imageName: macOS-10.15
    pool:
      vmImage: $(imageName)
    steps:

    - checkout: none

    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: source-build-managed
        path: $(System.DefaultWorkingDirectory)

    - template: steps/install-dotnet.yml

    - task: DotNetCoreCLI@2
      displayName: dotnet test
      inputs:
        command: test
        configuration: $(buildConfiguration)
        projects: test/**/*.Tests.csproj
        arguments: '--no-build'
      env:
        DD_SERVICE: dd-trace-dotnet

  - job: unit_tests_managed_linux_arm64
    pool: Arm64
    workspace:
      clean: all

    steps:

    - checkout: none

    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: source-build-managed
        path: $(System.DefaultWorkingDirectory)

    - task: DotNetCoreCLI@2
      displayName: dotnet test
      inputs:
        command: test
        configuration: $(buildConfiguration)
        projects: test/**/*.Tests.csproj
        arguments: '--no-build'
      env:
        DD_SERVICE: dd-trace-dotnet
