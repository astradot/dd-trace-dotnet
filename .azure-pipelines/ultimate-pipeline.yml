trigger:
  branches:
    include:
      - '*'
    exclude:
      - refs/pull/*/head
  paths:
    exclude:
      - docs/*
      - .github/*

# Global variables
variables:
  buildConfiguration: Release
  dotnetCoreSdk5Version: 5.0.103
  ddApiKey: $(DD_API_KEY)
  DD_DOTNET_TRACER_MSBUILD:

# Declare the datadog agent as a resource to be used as a pipeline service
resources:
  containers:
  - container: dd_agent
    image: datadog/agent
    ports:
    - 8126:8126
    env:
      DD_API_KEY: $(ddApiKey)
      DD_INSIDE_CI: true

# Stages
stages:
- stage: build
  dependsOn: []
  jobs:
  - job: build_managed
    pool:
      vmImage: windows-2019
    steps:
    - task: UseDotNet@2
      displayName: Install dotnet core sdk 5.0
      inputs:
        packageType: sdk
        version: $(dotnetCoreSdk5Version)

    - task: MSBuild@1
      displayName: Build all managed projects
      inputs:
        solution: Datadog.Trace.proj
        configuration: $(buildConfiguration)
        msbuildArguments: /t:BuildCsharp
        maximumCpuCount: true

    - task: DotNetCoreCLI@2
      displayName: Create NuGet packages
      inputs:
        command: pack
        nobuild: true
        packagesToPack: src/Datadog.Trace/Datadog.Trace.csproj;src/Datadog.Trace.OpenTracing/Datadog.Trace.OpenTracing.csproj
        packDirectory: $(System.DefaultWorkingDirectory)/nuget-output
        configuration: $(buildConfiguration)

    - publish: $(System.DefaultWorkingDirectory)/nuget-output
      displayName: Upload NuGet packages
      artifact: nuget-packages

    - publish: $(System.DefaultWorkingDirectory)
      displayName: Upload working directory after the managed build
      artifact: source-build-managed

  - job: build_native_windows
    dependsOn: build_managed # The native build relies on Datadog.Trace.ClrProfiler.Managed.Loader to be built
    pool:
      vmImage: windows-2019
    variables:
      tracerHomeName: windows-tracer-home
      tracerHome: $(System.DefaultWorkingDirectory)/src/bin/$(tracerHomeName)
      msiHome: $(System.DefaultWorkingDirectory)/src/bin/msi
    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: source-build-managed
        path: $(System.DefaultWorkingDirectory)

    - task: UseDotNet@2
      displayName: install dotnet core sdk 5.0
      inputs:
        packageType: sdk
        version: $(dotnetCoreSdk5Version)

    # This is only here because the msi build later causes a restore error...not sure why
    - task: DotNetCoreCLI@2
      displayName: dotnet restore
      inputs:
        command: restore
        projects: src/**/*.csproj

    - task: NuGetToolInstaller@1
      displayName: install nuget

    - task: NuGetCommand@2
      displayName: nuget restore
      inputs:
        restoreSolution: Datadog.Trace.Native.sln
        verbosityRestore: Normal

    # this triggers a dependency chain that builds all the managed, x64, and x86 dlls, and the zip and msi files
    # Outputs include:
    # - Windows Datadog.Trace.ClrProfiler.Native.dll (x86 and x64)
    # - Windows MSI (x86 and x64)
    # - Windows tracer home directory
    - task: MSBuild@1
      displayName: build both msi
      inputs:
        solution: Datadog.Trace.proj
        configuration: $(buildConfiguration)
        msbuildArguments: /t:msi /p:Platform=All;ZipHomeDirectory=true;TracerHomeDirectory=$(tracerHome);RunWixToolsOutOfProc=true;MsiOutputPath=$(msiHome)
        maximumCpuCount: true

    - publish: $(System.DefaultWorkingDirectory)
      artifact: source-build-managed-and-native-windows
      condition: succeededOrFailed()

    - publish: $(msiHome)/en-us
      displayName: Upload Windows MSIs
      artifact: windows-msi

    - publish: $(tracerHome).zip
      displayName: Upload Windows tracer home zip
      artifact: $(tracerHomeName)

    - publish: $(tracerHome)/win-x86
      displayName: Upload Windows x86 profiler directory
      artifact: profiler-windows-x86

    - publish: $(tracerHome)/win-x64
      displayName: Upload Windows x64 profiler directory
      artifact: profiler-windows-x64

  - job: build_native_linux
    dependsOn: build_managed # The native build relies on Datadog.Trace.ClrProfiler.Managed.Loader to be built
    pool:
      vmImage: ubuntu-20.04
    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: source-build-managed
        path: $(System.DefaultWorkingDirectory)

    - script: |
        chmod +x $(System.DefaultWorkingDirectory)/build/docker/Datadog.Trace.ClrProfiler.Native.sh
      displayName: 'Workaround: Restore wiped executable permission on build/docker/Datadog.Trace.ClrProfiler.Native.sh'

    - task: DockerCompose@0
      displayName: docker-compose run Profiler
      inputs:
        containerregistrytype: Container Registry
        dockerComposeCommand: run Profiler

    - publish: $(System.DefaultWorkingDirectory)/src/Datadog.Trace.ClrProfiler.Native/bin/Release/x64
      displayName: Uploading linux tracer home artifact
      artifact: linux-tracer-home

  - job: build_native_alpine_linux
    dependsOn: build_managed # The native build relies on Datadog.Trace.ClrProfiler.Managed.Loader to be built
    pool:
      vmImage: ubuntu-20.04
    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: source-build-managed
        path: $(System.DefaultWorkingDirectory)

    - script: |
        chmod +x $(System.DefaultWorkingDirectory)/build/docker/Datadog.Trace.ClrProfiler.Native.sh
      displayName: 'Workaround: Restore wiped executable permission on build/docker/Datadog.Trace.ClrProfiler.Native.sh'

    - task: DockerCompose@0
      displayName: docker-compose run Profiler.Alpine
      inputs:
        containerregistrytype: Container Registry
        dockerComposeCommand: run Profiler.Alpine

    - publish: $(System.DefaultWorkingDirectory)/src/Datadog.Trace.ClrProfiler.Native/bin/Release/x64
      displayName: Uploading alpine linux tracer home artifact
      artifact: alpine-linux-tracer-home

- stage: managed_unit_tests
  dependsOn: build
  jobs:
  - job: unit_tests_managed
    strategy:
      matrix:
        windows:
          imageName: windows-2019
        linux:
          imageName: ubuntu-18.04
        macos:
          imageName: macOS-10.15
    pool:
      vmImage: $(imageName)
    steps:

    - checkout: none

    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: source-build-managed
        path: $(System.DefaultWorkingDirectory)

    - template: steps/install-dotnet.yml

    # Ideally we would use the following MSBuild command which can more intelligently parallelize the build
    #    - task: MSBuild@1
    #      displayName: Build all managed unit test projects
    #      inputs:
    #        solution: Datadog.Trace.proj
    #        configuration: $(buildConfiguration)
    #        msbuildArguments: /t:BuildCsharpTests
    #        maximumCpuCount: true

    - task: DotNetCoreCLI@2
      displayName: dotnet build
      inputs:
        command: build
        configuration: $(buildConfiguration)
        arguments: /nowarn:netsdk1138
        projects: |
          test/**/*.Tests.csproj
      env:
        DD_SERVICE: dd-trace-dotnet

    - task: DotNetCoreCLI@2
      displayName: dotnet test
      inputs:
        command: test
        arguments: '--no-build'
        configuration: $(buildConfiguration)
        projects: test/**/*.Tests.csproj
      env:
        DD_SERVICE: dd-trace-dotnet

  - job: unit_tests_managed_linux_arm64
    pool: Arm64
    workspace:
      clean: all

    steps:

    - checkout: none

    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: source-build-managed
        path: $(System.DefaultWorkingDirectory)

    - task: DotNetCoreCLI@2
      displayName: dotnet test
      inputs:
        command: test
        configuration: $(buildConfiguration)
        projects: test/**/*.Tests.csproj
      env:
        DD_SERVICE: dd-trace-dotnet

- stage: native_unit_tests
  dependsOn: build
  jobs:
  - job: native_unit_tests_windows
    pool:
      vmImage: windows-2019

    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: source-build-managed-and-native-windows
        path: $(System.DefaultWorkingDirectory)

    # Install the .NET SDK so any managed libraries needed for the C++ unit tests can be built
    - template: steps/install-dotnet.yml

    # This should already be accounted for but unfortunately it is not
    - task: DotNetCoreCLI@2
      displayName: dotnet build
      inputs:
        command: build
        configuration: $(buildConfiguration)
        arguments: /nowarn:netsdk1138
        projects: |
          test/**/Samples.ExampleLibrary*.csproj

    - task: MSBuild@1
      displayName: Build x86 native unit test projects
      inputs:
        solution: Datadog.Trace.proj
        platform: x86
        configuration: $(buildConfiguration)
        msbuildArguments: /t:BuildCppTests
        maximumCpuCount: true

    - task: MSBuild@1
      displayName: Build x64 native unit test projects
      inputs:
        solution: Datadog.Trace.proj
        platform: x64
        configuration: $(buildConfiguration)
        msbuildArguments: /t:BuildCppTests
        maximumCpuCount: true

    - script: Datadog.Trace.ClrProfiler.Native.Tests.exe --gtest_output=xml
      displayName: run tests
      workingDirectory: $(System.DefaultWorkingDirectory)/test/Datadog.Trace.ClrProfiler.Native.Tests/bin/$(buildConfiguration)/x86

    - script: Datadog.Trace.ClrProfiler.Native.Tests.exe --gtest_output=xml
      displayName: run tests
      workingDirectory: $(System.DefaultWorkingDirectory)/test/Datadog.Trace.ClrProfiler.Native.Tests/bin/$(buildConfiguration)/x64
      condition: succeededOrFailed()

    - task: PublishTestResults@2
      displayName: publish test results
      inputs:
        testResultsFiles: test/**/test*.xml
      condition: succeededOrFailed()