trigger:
  branches:
    include:
      - '*'
    exclude:
      - refs/pull/*/head
  paths:
    exclude:
      - docs/*
      - .github/*

# Global variables
variables:
  buildConfiguration: Release
  dotnetCoreSdkVersion: 3.1.107
  dotnetCoreSdk5Version: 5.0.103
  ddApiKey: $(DD_API_KEY)
  DD_DOTNET_TRACER_MSBUILD:
  nugetNativeCacheFolder: $(System.DefaultWorkingDirectory)/packages
  nugetManagedCacheFolder: $(System.DefaultWorkingDirectory)/.nuget_cache
  dotnetCache: $(Agent.ToolsDirectory)/dotnet

# Declare the datadog agent as a resource to be used as a pipeline service
resources:
  containers:
    - container: dd_agent
      image: datadog/agent
      ports:
        - 8126:8126
      env:
        DD_API_KEY: $(ddApiKey)
        DD_INSIDE_CI: true

# Stages
stages:

  - stage: build
    dependsOn: []
    jobs:
      - job: build
        timeoutInMinutes: 120
        strategy:
          matrix:
            x64:
              buildPlatform: x64
            x86:
              buildPlatform: x86
        pool:
          vmImage: windows-2019
        variables:
          tracerHomeName: windows-tracer-home
          tracerHome: $(System.DefaultWorkingDirectory)/src/bin/$(tracerHomeName)
          msiHome: $(System.DefaultWorkingDirectory)/src/bin/msi

        steps:

          - task: Cache@2
            inputs:
              key: 'nuget_native | "$(Agent.OS)" | "$(buildPlatform)" | **/*.csproj | Datadog.Trace.sln '
              path: $(nugetNativeCacheFolder)
            displayName: Native Nuget Cache

          - task: Cache@2
            inputs:
              key: 'nuget_managed | "$(Agent.OS)" | "$(buildPlatform)" | **/*.csproj'
              path: $(nugetManagedCacheFolder)
            displayName: Managed Nuget Cache

          - task: Cache@2
            inputs:
              key: 'dotnet_cache | "$(Agent.OS)"'
              path: $(dotnetCache)
            displayName: Dotnet Cache

          - task: UseDotNet@2
            displayName: Dotnet Core Runtime 2.1
            inputs:
              packageType: runtime
              version: 2.1.x

          - task: UseDotNet@2
            displayName: Dotnet Core Runtime 3.0
            inputs:
              packageType: runtime
              version: 3.0.x

          - task: UseDotNet@2
            displayName: Dotnet Core Runtime 3.1
            inputs:
              packageType: runtime
              version: 3.1.x

          - task: UseDotNet@2
            displayName: Dotnet Sdk 5.0
            inputs:
              packageType: sdk
              version: $(dotnetCoreSdk5Version)

          - task: NuGetToolInstaller@1
            displayName: Nuget Install

          - script: Restore
            displayName: ./build.ps1 Restore --NugetManagedCacheFolder $(nugetManagedCacheFolder)

          - script: Build managed
            displayName: ./build.ps1 CompileSolution --Configuration $(buildConfiguration) --Platform $(buildPlatform)

          - script: Build native
            displayName: ./build.ps1 CompileNative --Configuration $(buildConfiguration) --Platform $(buildPlatform)

          - script: Build Framework Reproductions
            displayName: ./build.ps1 CompileFrameworkReproductions --Configuration $(buildConfiguration) --Platform $(buildPlatform)

          - script: Build Integration Tests
            displayName: ./build.ps1 CompileIntegrationTests --Configuration $(buildConfiguration) --Platform $(buildPlatform) --ManagedProfilerOutputDirectory "$(tracerHome)"

          - script: Build Samples
            displayName: ./build.ps1 CompileSamples --Configuration $(buildConfiguration) --Platform $(buildPlatform) --ManagedProfilerOutputDirectory "$(tracerHome)"

          - publish: $(System.DefaultWorkingDirectory)
            artifact: source-build-$(buildPlatform)
            condition: succeededOrFailed()

  # native build stage
  - stage: native_build
    dependsOn: []
    jobs:
      - job: build
        pool:
          vmImage: windows-2019
        steps:

          - task: Cache@2
            inputs:
              key: 'nuget_native | "$(Agent.OS)" | src/**/*.csproj'
              restoreKeys: |
                nuget_native | "$(Agent.OS)"
                nuget_native
              path: $(nugetNativeCacheFolder)
            displayName: Cache Nuget packages

          - task: Cache@2
            inputs:
              key: 'dotnet_cache | "$(Agent.OS)"'
              restoreKeys: |
                dotnet_cache
              path: $(dotnetCache)
            displayName: Cache Dotnet

          - task: UseDotNet@2
            displayName: install dotnet core runtime 2.1
            inputs:
              packageType: runtime
              version: 2.1.x

          - task: UseDotNet@2
            displayName: install dotnet core runtime 3.0
            inputs:
              packageType: runtime
              version: 3.0.x

          - task: UseDotNet@2
            displayName: install dotnet core runtime 3.1
            inputs:
              packageType: sdk
              version: $(dotnetCoreSdkVersion)

          - task: UseDotNet@2
            displayName: install dotnet core sdk 5.0
            inputs:
              packageType: sdk
              version: $(dotnetCoreSdk5Version)

          - task: NuGetToolInstaller@1
            displayName: install nuget

          - script: Build managed loader
            displayName: ./build.ps1 CompileManagedLoader --Configuration $(buildConfiguration) --Platform $(buildPlatform)

          - script: Restore native solution
            displayName: ./build.ps1 RestoreNative --Configuration $(buildConfiguration) --Platform $(buildPlatform)

          - script: Build native
            displayName: ./build.ps1 CompileNative --Configuration $(buildConfiguration) --Platform $(buildPlatform)

          - publish: $(System.DefaultWorkingDirectory)
            artifact: source-native-restore

  - stage: native_unit_tests
    dependsOn: native_build
    jobs:
      - job: unit_tests
        pool:
          vmImage: windows-2019
        steps:

          - checkout: none

          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: source-native-restore
              path: $(System.DefaultWorkingDirectory)

          # Todo: move to Nuke
          - script: Datadog.Trace.ClrProfiler.Native.Tests.exe --gtest_output=xml
            displayName: run tests
            workingDirectory: $(System.DefaultWorkingDirectory)/test/Datadog.Trace.ClrProfiler.Native.Tests/bin/$(buildConfiguration)/$(buildPlatform)

          - task: PublishTestResults@2
            displayName: publish test results
            inputs:
              testResultsFiles: test/**/test*.xml
              buildPlatform: $(buildPlatform)
              buildConfiguration: $(buildConfiguration)
            condition: succeededOrFailed()

  # managed unit tests stage
  - stage: managed_unit_tests
    dependsOn: build
    jobs:
      - job: unit_tests
        strategy:
          matrix:
            x64:
              buildPlatform: x64
            x86:
              buildPlatform: x86
        pool:
          vmImage: windows-2019
        steps:

          - checkout: none

          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: source-build-$(buildPlatform)
              path: $(System.DefaultWorkingDirectory)

          - task: Cache@2
            inputs:
              key: 'dotnet_cache | "$(Agent.OS)"'
              restoreKeys: |
                dotnet_cache
              path: $(dotnetCache)
            displayName: Cache Dotnet

          - task: UseDotNet@2
            displayName: install dotnet core runtime 2.1
            inputs:
              packageType: runtime
              version: 2.1.x

          - task: UseDotNet@2
            displayName: install dotnet core runtime 3.0
            inputs:
              packageType: runtime
              version: 3.0.x

          - task: UseDotNet@2
            displayName: install dotnet core runtime 3.1
            inputs:
              packageType: runtime
              version: 3.1.x

          - task: UseDotNet@2
            displayName: install dotnet core sdk 5.0
            inputs:
              packageType: sdk
              version: $(dotnetCoreSdk5Version)

          - script: Run unit tests
            displayName: ./build.ps1 UnitTests --Configuration $(buildConfiguration) --Platform $(buildPlatform)


  # managed integration tests stage
  - stage: integration_tests
    dependsOn: build
    jobs:
      - job: windows
        pool:
          vmImage: windows-2019
        steps:

          - checkout: none

      - job: windows_iis



  # managed benchmark tests stage
  - stage: benchmark_tests
    dependsOn: build
    jobs:
      - job: benchmarks
        pool:
          vmImage: windows-2019
        steps:

          - checkout: none